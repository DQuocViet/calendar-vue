{"ast":null,"code":"import { store } from \"@/store\";\nexport default {\n  name: 'CalendarEvent',\n  props: ['event', 'day'],\n  computed: {\n    getEventBackgroundColor() {\n      const colors = ['#FF9999', '#85D6FF', '#99FF99'];\n      let randomColor = colors[Math.floor(Math.random() * colors.length)];\n      return `background-color: ${randomColor}`;\n    }\n\n  },\n  methods: {\n    editEvent(dayId, eventDetails) {\n      store.editEvent(dayId, eventDetails);\n    },\n\n    updateEvent(dayId, originalEventDetails, updatedEventDetails) {\n      if (updatedEventDetails === '') updatedEventDetails = originalEventDetails;\n      store.updateEvent(dayId, originalEventDetails, updatedEventDetails);\n      this.newEventDetails = '';\n    }\n\n  },\n\n  data() {\n    return {\n      newEventDetails: ''\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAiBA;AAEA;EACAA,qBADA;EAEAC,uBAFA;EAGAC;IACAC;MACA;MACA;MACA;IACA;;EALA,CAHA;EAUAC;IACAC;MACAC;IACA,CAHA;;IAIAC;MACA;MACAD;MACA;IACA;;EARA,CAVA;;EAoBAE;IACA;MACAC;IADA;EAGA;;AAxBA","names":["name","props","computed","getEventBackgroundColor","methods","editEvent","store","updateEvent","data","newEventDetails"],"sourceRoot":"src/components","sources":["CalendarEvent.vue"],"sourcesContent":["<template>\n  <div class=\"day-event\" :style=\"getEventBackgroundColor\">\n    <div v-if=\"!event.edit\">\n      <span class=\"has-text-centered details\">{{ event.details }}</span>\n      <div class=\"has-text-centered icons\">\n        <i class=\"fa fa-pencil-square edit-icon\" @click=\"editEvent(day.id, event.details)\"></i>\n        <i class=\"fa fa-trash delete-icon\"></i></div>\n    </div>\n    <div v-if=\"event.edit\">\n      <input type=\"text\" :placeholder=\"event.details\" v-model=\"newEventDetails\"/>\n      <div class=\"has-text-centered icons\">\n        <i class=\"fa fa-check\" @click=\"updateEvent(day.id, event.details, newEventDetails)\"></i>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport {store} from \"@/store\";\n\nexport default {\n  name: 'CalendarEvent',\n  props: ['event', 'day'],\n  computed: {\n    getEventBackgroundColor() {\n      const colors = ['#FF9999', '#85D6FF', '#99FF99'];\n      let randomColor = colors[Math.floor(Math.random() * colors.length)];\n      return `background-color: ${randomColor}`;\n    }\n  },\n  methods: {\n    editEvent(dayId, eventDetails) {\n      store.editEvent(dayId, eventDetails);\n    },\n    updateEvent(dayId, originalEventDetails, updatedEventDetails) {\n      if (updatedEventDetails === '') updatedEventDetails = originalEventDetails;\n      store.updateEvent(dayId, originalEventDetails, updatedEventDetails);\n      this.newEventDetails = '';\n    }\n  },\n  data() {\n    return {\n      newEventDetails: ''\n    }\n  },\n\n} </script>\n<style lang=\"scss\" scoped> .day-event {\n  margin-top: 6px;\n  margin-bottom: 6px;\n  display: block;\n  color: #4C4C4C;\n  padding: 5px;\n\n  .details {\n    display: block;\n  }\n\n  .icons .fa {\n    padding: 0 2px;\n  }\n\n  input {\n    background: none;\n    border: 0;\n    border-bottom: 1px solid #FFF;\n    width: 100%;\n\n    &:focus {\n      outline: none;\n    }\n  }\n\n  .has-text-centered.details {\n    width: 10rem;\n    text-align: center;\n  }\n\n  .has-text-centered.icons {\n    text-align: center\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}